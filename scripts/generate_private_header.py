import os
import sys

base_path = os.path.dirname(__file__)
base_path = os.path.abspath(os.path.join(base_path, '..'))
src_path = os.path.join(base_path, 'src')

os.chdir(src_path)

private_headers = []

for root, dirs, files in os.walk(src_path):
    root = os.path.relpath(root)
    for f in files:
        if f == 'lvgl_private.h':
            continue

        if f.endswith('.h') and 'private' in f:
            f = os.path.join(root, f)
            if sys.platform.startswith('win'):
                f = f.replace('\\', '/')

            private_headers.append(f)


private_headers = '\n'.join(f'#include "{f}"' for f in private_headers)

template = f'''\
/**
 * @file lvgl_private.h
 *
 */
 
/*
 *                            DO NOT EDIT
 * This file is automatically generated by "generate_private_header.py"
 *
 */

#ifndef LVGL_PRIVATE_H
#define LVGL_PRIVATE_H

#ifdef __cplusplus
extern "C" {{
#endif

/*********************
 *      INCLUDES
 *********************/
#include "core/lv_global.h"

{private_headers}

/*********************
 *      DEFINES
 *********************/

/**********************
 *      TYPEDEFS
 **********************/

/**********************
 * GLOBAL PROTOTYPES
 **********************/

/**********************
 *      MACROS
 **********************/

#ifdef __cplusplus
}} /*extern "C"*/
#endif

#endif /*LVGL_PRIVATE_H*/
'''
lvgl_private = os.path.join(src_path, 'lvgl_private.h')


if sys.argv[-1] == 'validate':
    with open(lvgl_private, 'r') as f:
        data = f.read()

    if data != template:
        raise RuntimeError('validation failed')
else:
    with open(lvgl_private, 'w') as f:
        f.write(template)
